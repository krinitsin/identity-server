// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"identityserver/pkg/models/rest"
)

// GetPublicCountryOKCode is the HTTP code returned for type GetPublicCountryOK
const GetPublicCountryOKCode int = 200

/*GetPublicCountryOK Country for Etherium address

swagger:response getPublicCountryOK
*/
type GetPublicCountryOK struct {

	/*
	  In: Body
	*/
	Payload *rest.CountryResponse `json:"body,omitempty"`
}

// NewGetPublicCountryOK creates GetPublicCountryOK with default headers values
func NewGetPublicCountryOK() *GetPublicCountryOK {

	return &GetPublicCountryOK{}
}

// WithPayload adds the payload to the get public country o k response
func (o *GetPublicCountryOK) WithPayload(payload *rest.CountryResponse) *GetPublicCountryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get public country o k response
func (o *GetPublicCountryOK) SetPayload(payload *rest.CountryResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPublicCountryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPublicCountryBadRequestCode is the HTTP code returned for type GetPublicCountryBadRequest
const GetPublicCountryBadRequestCode int = 400

/*GetPublicCountryBadRequest Etherium address is invalid

swagger:response getPublicCountryBadRequest
*/
type GetPublicCountryBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest.Error `json:"body,omitempty"`
}

// NewGetPublicCountryBadRequest creates GetPublicCountryBadRequest with default headers values
func NewGetPublicCountryBadRequest() *GetPublicCountryBadRequest {

	return &GetPublicCountryBadRequest{}
}

// WithPayload adds the payload to the get public country bad request response
func (o *GetPublicCountryBadRequest) WithPayload(payload *rest.Error) *GetPublicCountryBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get public country bad request response
func (o *GetPublicCountryBadRequest) SetPayload(payload *rest.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPublicCountryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetPublicCountryDefault Internal server error

swagger:response getPublicCountryDefault
*/
type GetPublicCountryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *rest.Error `json:"body,omitempty"`
}

// NewGetPublicCountryDefault creates GetPublicCountryDefault with default headers values
func NewGetPublicCountryDefault(code int) *GetPublicCountryDefault {
	if code <= 0 {
		code = 500
	}

	return &GetPublicCountryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get public country default response
func (o *GetPublicCountryDefault) WithStatusCode(code int) *GetPublicCountryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get public country default response
func (o *GetPublicCountryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get public country default response
func (o *GetPublicCountryDefault) WithPayload(payload *rest.Error) *GetPublicCountryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get public country default response
func (o *GetPublicCountryDefault) SetPayload(payload *rest.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPublicCountryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
