// Code generated by go-swagger; DO NOT EDIT.

package private

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"identityserver/pkg/models/rest"
)

// SetIdentityHandlerFunc turns a function with the right signature into a set identity handler
type SetIdentityHandlerFunc func(SetIdentityParams, *rest.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn SetIdentityHandlerFunc) Handle(params SetIdentityParams, principal *rest.Principal) middleware.Responder {
	return fn(params, principal)
}

// SetIdentityHandler interface for that can handle valid set identity params
type SetIdentityHandler interface {
	Handle(SetIdentityParams, *rest.Principal) middleware.Responder
}

// NewSetIdentity creates a new http.Handler for the set identity operation
func NewSetIdentity(ctx *middleware.Context, handler SetIdentityHandler) *SetIdentity {
	return &SetIdentity{Context: ctx, Handler: handler}
}

/* SetIdentity swagger:route POST /private/identity private setIdentity

Set identity after registration

*/
type SetIdentity struct {
	Context *middleware.Context
	Handler SetIdentityHandler
}

func (o *SetIdentity) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetIdentityParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest.Principal
	if uprinc != nil {
		principal = uprinc.(*rest.Principal) // this is really a rest.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
